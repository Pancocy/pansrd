import{_ as h,E as n,c as k,o as l,j as s,I as p,a4 as t,w as e,a as i}from"./chunks/framework.Bzt5SQa6.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{"0":"o","1":"u","2":"t","3":"l","4":"i","5":"n","6":"e","7":":","8":"d","9":"e","10":"e","11":"p"},"headers":[],"relativePath":"datastru/ds-hashalgorithm.md","filePath":"datastru/ds-hashalgorithm.md"}'),E={name:"datastru/ds-hashalgorithm.md"},r=s("h3",{id:"哈希算法",tabindex:"-1"},[i("哈希算法 "),s("a",{class:"header-anchor",href:"#哈希算法","aria-label":'Permalink to "哈希算法"'},"​")],-1),d=s("p",null,[i("先前讲到的哈希扩容本质上并不能减少哈希冲突的发生，只是能保证在发生哈希冲冲突的情况下能够继续使用哈希表。优化哈希算法从根源上降低哈希冲突的发生概率，是目前已知最有效的方法。 以"),s("code",null,"链式存储"),i("实现的哈希为例，理想情况下键值对均匀分布在各个桶中，达到最佳查询效率；最差情况下所有键值对都存储到同一个桶中，时间复杂度退化至"),s("em",null,"O(n)"),i("。每个哈希元素在“桶”的位置是由哈希函数决定的，优化哈希函数使无规律分布的key均匀分布在桶中，从而降低哈希冲突的概率，实现哈希表的高效存储和安全性。")],-1),g=s("h4",{id:"常见的哈希算法",tabindex:"-1"},[i("常见的哈希算法 "),s("a",{class:"header-anchor",href:"#常见的哈希算法","aria-label":'Permalink to "常见的哈希算法"'},"​")],-1),y=s("p",null,"一些标准哈希算法，例如 MD5、SHA-1、SHA-2 和 SHA-3 等。它们可以将任意长度的输入数据映射到恒定长度的哈希值。哈希算法的高效性和安全性一直都是优化哈希算法的关键。下面是已知标准哈希算法的具体信息：",-1),F=t("",15);function c(D,A,o,C,B,u){const a=n("center");return l(),k("div",null,[r,d,g,y,p(a,null,{default:e(()=>[i("常见标准哈希算法")]),_:1}),F])}const b=h(E,[["render",c]]);export{_ as __pageData,b as default};
