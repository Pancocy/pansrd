import{_ as t,E as k,c as l,o as p,j as s,I as h,a4 as e,w as n,a as i}from"./chunks/framework.Bzt5SQa6.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"datastru/ds-linkedlist.md","filePath":"datastru/ds-linkedlist.md"}'),d={name:"datastru/ds-linkedlist.md"},E=s("h3",{id:"_1-链表简介",tabindex:"-1"},[i("1. 链表简介 "),s("a",{class:"header-anchor",href:"#_1-链表简介","aria-label":'Permalink to "1. 链表简介"'},"​")],-1),r=s("p",null,"存储数组的空间是连续的。然而当需要的空间比较大时，空闲的内存空间并非都是连续的。因此引入链表这种相较于数组更灵活的数据结构，链表是一种线性数据结构。链表的每个节点对象由引用(指针)和值组成，每个节点散落分布在内存空间中。节点间通过引用连接，上一个节点通过将引用指向下一个节点来访问节点内存地址。起始节点称为头节点，结束节点称为尾节点。因链表节点除存储值外还存储引用，因此在相同数据量下，链表需要的空间比数组更多。",-1),g=s("p",null,[s("img",{src:"https://xxzxka-1316694700.cos.ap-nanjing.myqcloud.com/psrd%2Flink-list.svg",alt:"链表",loading:"lazy"})],-1),y=s("div",{class:"info custom-block"},[s("p",{class:"custom-block-title"},"链表结构体说明"),s("p",null,[i("链表节点由值和指针两部分组成，因此在定义节点对象时，除声明值外，还要声明一个引用计数器。在Rust中使用智能指针"),s("em",null,"Rc"),i("来定义链表引用，"),s("em",null,"Rc"),i("即引用计数("),s("em",null,"reference counting"),i(")。")])],-1),F=e("",33);function o(c,A,D,C,u,b){const a=k("center");return p(),l("div",null,[E,r,g,h(a,null,{default:n(()=>[i("链表示意图")]),_:1}),y,h(a,null,{default:n(()=>[i("使用rust定义的链表结构体")]),_:1}),F])}const m=t(d,[["render",o]]);export{_ as __pageData,m as default};
